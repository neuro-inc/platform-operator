[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[project]
name = "platform-operator"
version = "0.0.0"
description = "Apolo platform operator"
readme = "README.md"
license = "Proprietary"
authors = [
    { name = "Apolo.us", email = "support@apolo.us" },
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
]
dynamic = ["version"]
requires-python = ">=3.13,<4.0"
dependencies = [
    "kopf==1.38.0",
    "aiohttp==3.12.14",
    "pyyaml==6.0.2",
    "aiobotocore==2.22.0",
    "bcrypt==4.3.0",
    "neuro-config-client==25.8.7"
]

# Remove this section when poetry-dynamic-versioning drops [tool.poetry] support in favor of [project].
[tool.poetry]
name = "platform-operator"
version = "0.0.0"
description = "Apolo platform operator"
readme = "README.md"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
moto = { version = "5.1.10", extras = ["server"] }
mypy = "1.17.1"
pre-commit = "4.3.0"
pytest = "8.4.1"
pytest-aiohttp = "1.1.0"
pytest-asyncio = "1.1.0"
types-PyYAML = "*"
types-Werkzeug = "*"
pytest-cov = "6.2.1"
ruff = "^0.12.8"

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8"
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }


[tool.ruff]
target-version = "py313"

[tool.ruff.lint]
select = [
    "E", "F", "I", "C90", "UP", "B", "ASYNC", "N", "FBT", "A", "C4", "EM", "FA", "ICN",
    "G", "PIE", "T20", "PYI", "PT", "RET", "PTH"
]
ignore = [
    "A001", #Variable `type` is shadowing a Python builtin
    "A002", #Function argument `type` is shadowing a Python builtin
    "A003",
    "N818",
    "C901",   #is too complex
    "EM101",  #Exception must not use a string literal, assign to variable first
    "EM102",  #Exception must not use an f-string literal, assign to variable first
    "FBT001", #Boolean-typed positional argument in function definition
    "FBT002", #Boolean default positional argument in function definition
    "FBT003", #Boolean positional value in function call
    "B904" #Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
]

[tool.ruff.lint.isort]
combine-as-imports = true
lines-after-imports = 2
known-first-party = ["platform_operator", "tests"]
known-third-party = []

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["platform_operator"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "setuptools"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "kopf.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiobotocore.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "botocore.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "moto.*"
ignore_missing_imports = true
